AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a Check Point cross AZ Cluster into an existing VPC (20211212)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Network Configuration
        Parameters:
          - VPC
          - PublicSubnetA
          - PublicSubnetB
          - PrivateSubnetA
          - PrivateSubnetB
          - InternalRouteTable
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - GatewayName
          - GatewayInstanceType
          - KeyName
          - AllocatePublicAddress
          - VolumeSize
          - VolumeType
          - VolumeEncryption
          - EnableInstanceConnect
          - GatewayPredefinedRole
          - TerminationProtection
      - Label:
          default: Check Point Settings
        Parameters:
          - GatewayVersion
          - Shell
          - GatewayPasswordHash
          - GatewaySICKey
      - Label:
          default: Advanced Settings
        Parameters:
          - ResourcesTagName
          - GatewayHostname
          - AllowUploadDownload
          - GatewayBootstrapScript
          - NTPPrimary
          - NTPSecondary
    ParameterLabels:
      VPC:
        default: VPC
      PublicSubnetA:
        default: Public subnet 1
      PublicSubnetB:
        default: Public subnet 2
      PrivateSubnetA:
        default: Private subnet 1
      PrivateSubnetB:
        default: Private subnet 2
      InternalRouteTable:
        default: Internal route table
      GatewayName:
        default: Gateway Name
      GatewayInstanceType:
        default: Security Gateways instance type
      KeyName:
        default: Key name
      AllocatePublicAddress:
        default: Allocate Elastic IPs for cluster members
      VolumeSize:
        default: Root volume size (GB)
      VolumeType:
        default: Volume Type
      VolumeEncryption:
        default: Volume encryption KMS key identifier
      EnableInstanceConnect:
        default: Enable AWS Instance Connect
      GatewayPredefinedRole:
        default: Existing IAM role name
      TerminationProtection:
        default: Termination Protection
      GatewayVersion:
        default: Gateways version & license
      Shell:
        default: Admin shell
      GatewayPasswordHash:
        default: Password hash
      GatewaySICKey:
        default: SIC key
      ResourcesTagName:
        default: Resources prefix tag
      GatewayHostname:
        default: Gateway Hostname
      AllowUploadDownload:
        default: Allow upload & download
      GatewayBootstrapScript:
        default: Bootstrap Script
      NTPPrimary:
        default: Primary NTP server
      NTPSecondary:
        default: Secondary NTP server
Parameters:
  VPC:
    Description: Select an existing VPC.
    Type: AWS::EC2::VPC::Id
    MinLength: 1
    ConstraintDescription: you must select a VPC.
  PublicSubnetA:
    Description: Select a public subnet for the first Security Gateway.
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: you must select a public subnet for the first Security Gateway.
  PublicSubnetB:
    Description: Select a public subnet for the second Security Gateway.
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: you must select a public subnet for the second Security Gateway.
  PrivateSubnetA:
    Description: Select a private subnet for the first Security Gateway.
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: you must select a private subnet for the first Security Gateway.
  PrivateSubnetB:
    Description: Select a private subnet for the second Security Gateway.
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: you must select a private subnet for the second Security Gateway.
  InternalRouteTable:
    Description: Set 0.0.0.0/0 route to the Active Cluster member instance in this route table (e.g. rtb-12a34567). Route table cannot have an existing 0.0.0.0/0 route. If empty - traffic will not be routed through the Security Cluster, this requires manual configuration in the Route Table. (optional)
    Type: String
    Default: ''
  GatewayName:
    Description: The name tag of the Security Gateway instances. (optional)
    Type: String
    Default: Check-Point-Cluster
  GatewayInstanceType:
    Type: String
    Default: c5.xlarge
    AllowedValues:
      - c4.large
      - c4.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - m6i.12xlarge
      - m6i.24xlarge
      - c6i.large
      - c6i.xlarge
      - c6i.2xlarge
      - c6i.4xlarge
      - c6i.12xlarge
      - c6i.24xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.12xlarge
      - r5a.24xlarge
      - r5b.large
      - r5b.xlarge
      - r5b.2xlarge
      - r5b.4xlarge
      - r5b.12xlarge
      - r5b.24xlarge
      - r5n.large
      - r5n.xlarge
      - r5n.2xlarge
      - r5n.4xlarge
      - r5n.12xlarge
      - r5n.24xlarge
      - m6a.large
      - m6a.xlarge
      - m6a.2xlarge
      - m6a.4xlarge
      - m6a.12xlarge
      - m6a.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the Security Gateways.
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AllocatePublicAddress:
    Description: When choosing "false", make sure the cluster members can connect to an ec2 endpoint.
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
  VolumeSize:
    Type: Number
    Default: 100
    MinValue: 100
  VolumeType:
    Description: General Purpose SSD Volume Type
    Type: String
    Default: gp3
    AllowedValues:
      - gp3
      - gp2
  VolumeEncryption:
    Description: KMS or CMK key Identifier - Use key ID, alias or ARN. Key alias should be prefixed with 'alias/' (e.g. for KMS default alias 'aws/ebs' - insert 'alias/aws/ebs').
    Type: String
    Default: alias/aws/ebs
  EnableInstanceConnect:
    Description: Enable SSH connection over AWS web console.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  GatewayPredefinedRole:
    Description: A predefined IAM role to attach to the cluster profile. (optional)
    Type: String
    Default: ''
  TerminationProtection:
    Description: Prevents an instance from accidental termination.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  GatewayVersion:
    Description: The license to install on the Security Gateways.
    Type: String
    Default: R81.10-BYOL
    AllowedValues:
      - R80.40-BYOL
      - R80.40-PAYG-NGTP
      - R80.40-PAYG-NGTX
      - R81-BYOL
      - R81-PAYG-NGTP
      - R81-PAYG-NGTX
      - R81.10-BYOL
      - R81.10-PAYG-NGTP
      - R81.10-PAYG-NGTX
  Shell:
    Description: Change the admin shell to enable advanced command line configuration.
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
      - /etc/cli.sh
      - /bin/bash
      - /bin/csh
      - /bin/tcsh
  GatewayPasswordHash:
    Description: Admin user's password hash (use command "openssl passwd -6 PASSWORD" to
      get the PASSWORD's hash). (optional)
    Type: String
    Default: ''
    AllowedPattern: '^[\$\./a-zA-Z0-9]*$'
    NoEcho: true
  GatewaySICKey:
    Description: The Secure Internal Communication key creates trusted connections between
      Check Point components. Choose a random string consisting of at least 8
      alphanumeric characters.
    Type: String
    AllowedPattern: '^[a-zA-Z0-9]{8,}$'
    ConstraintDescription: At least 8 alpha numeric characters.
    NoEcho: true
  ResourcesTagName:
    Description: Name tag prefix of the resources. (optional)
    Type: String
    Default: ''
  GatewayHostname:
    Description: The host name will be appended with member-a/b accordingly. (optional)
    Type: String
    Default: ''
    AllowedPattern: '^([A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z]))?$'
    ConstraintDescription: A valid hostname label or an empty string.
  AllowUploadDownload:
    Description: >-
      Automatically download updates and share statistical data for product improvement purpose.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  GatewayBootstrapScript:
    Description: An optional script with semicolon (;) separated commands to run on the initial boot. (optional)
    Type: String
    Default: ''
    NoEcho: true
  NTPPrimary:
    Description: (optional)
    Type: String
    Default: 169.254.169.123
    AllowedPattern: '^[\.a-zA-Z0-9\-]*$'
  NTPSecondary:
    Description: (optional)
    Type: String
    Default: 0.pool.ntp.org
    AllowedPattern: '^[\.a-zA-Z0-9\-]*$'
Conditions:
  ProvidedRouteTable: !Not [!Equals [!Ref InternalRouteTable, '']]
  AllocateAddress: !Equals [!Ref AllocatePublicAddress, true]
  EncryptedVolume: !Not [!Equals [!Ref VolumeEncryption, '']]
  CreateRole: !Equals [!Ref GatewayPredefinedRole, '']
  ProvidedPassHash: !Not [!Equals [!Ref GatewayPasswordHash, '']]
  ProvidedResourcesTag: !Not [!Equals [!Ref ResourcesTagName, '']]
Resources:
  ClusterReadyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: AllocateAddress
    Properties: {}
  ClusterReadyCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: AllocateAddress
    DependsOn: [MemberAInstance, MemberBInstance]
    Properties:
      Count: 2
      Handle: !Ref ClusterReadyHandle
      Timeout: 1800
  ClusterRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/iam/cluster-iam-role.yaml
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!If [CreateRole, !GetAtt ClusterRole.Outputs.ClusterIAMRole, !Ref GatewayPredefinedRole]]
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/utils/amis.yaml
      Parameters:
        Version: !Join ['-', [!Ref GatewayVersion, GW]]
  PermissiveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permissive security group.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            !Join
            - _
            - - !If [ProvidedResourcesTag, !Ref ResourcesTagName, !Ref 'AWS::StackName']
              - PermissiveSecurityGroup
  MemberAExternalInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: External.
      SourceDestCheck: false
      GroupSet: [!Ref PermissiveSecurityGroup]
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value:
            !Join
            - _
            - - !If [ProvidedResourcesTag, !Ref ResourcesTagName, !Ref 'AWS::StackName']
              - Member_A_ExternalInterface
  MemberBExternalInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: External.
      SourceDestCheck: false
      GroupSet: [!Ref PermissiveSecurityGroup]
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value:
            !Join
            - _
            - - !If [ProvidedResourcesTag, !Ref ResourcesTagName, !Ref 'AWS::StackName']
              - Member_B_ExternalInterface
  MemberAInternalInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Internal.
      GroupSet: [!Ref PermissiveSecurityGroup]
      SourceDestCheck: false
      SubnetId: !Ref PrivateSubnetA
      Tags:
        - Key: Name
          Value:
            !Join
            - _
            - - !If [ProvidedResourcesTag, !Ref ResourcesTagName, !Ref 'AWS::StackName']
              - Member_A_InternalInterface
  MemberBInternalInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Internal.
      GroupSet: [!Ref PermissiveSecurityGroup]
      SourceDestCheck: false
      SubnetId: !Ref PrivateSubnetB
      Tags:
        - Key: Name
          Value:
            !Join
            - _
            - - !If [ProvidedResourcesTag, !Ref ResourcesTagName, !Ref 'AWS::StackName']
              - Member_B_InternalInterface
  InternalDefaultRoute:
    Type: AWS::EC2::Route
    Condition: ProvidedRouteTable
    DependsOn: MemberAInternalInterface
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref MemberAInternalInterface
      RouteTableId: !Ref InternalRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ProvidedRouteTable
    Properties:
      RouteTableId: !Ref InternalRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ProvidedRouteTable
    Properties:
      RouteTableId: !Ref InternalRouteTable
      SubnetId: !Ref PrivateSubnetB
  MemberAInstance:
    Type: AWS::EC2::Instance
    DependsOn: MemberAInternalInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref GatewayName, Member-A]]
      ImageId: !GetAtt AMI.Outputs.ImageId
      InstanceType: !Ref GatewayInstanceType
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: !If [EncryptedVolume, true, false]
            KmsKeyId: !If [EncryptedVolume, !Ref VolumeEncryption, !Ref 'AWS::NoValue']
            VolumeType: !Ref VolumeType
            VolumeSize: !Ref VolumeSize
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref MemberAExternalInterface
        - DeviceIndex: 1
          NetworkInterfaceId: !Ref MemberAInternalInterface
      IamInstanceProfile: !Ref ClusterInstanceProfile
      DisableApiTermination: !Ref TerminationProtection
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'set -e'
            - 'logfile=/var/log/aws-user-data.log'
            - '> ${logfile}'
            - 'exec 1>>${logfile} 2>>${logfile}'
            - 'echo -e "\nStarting user-data\n"'
            - 'function report-status() {'
            - '    local rc=$?'
            - '    local reboot="${1:-false}"'
            - '    local status=""'
            - '    local reason="Security Gateway configuration"'
            - '    local data=""'
            - '    set +e'
            - '    printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >${CPDIR}/tmp/wait-handle.crt'
            - '    cat ${CPDIR}/conf/ca-bundle.crt >>${CPDIR}/tmp/wait-handle.crt'
            - '    if [[ ${rc} -eq 0 ]]; then'
            - '        status="SUCCESS"'
            - '        reason+=" completed"'
            - '        data="Configuration completed."'
            - '    else'
            - '        status="FAILURE"'
            - '        reason+=" failed"'
            - '        data="None"'
            - '    fi'
            - '    echo "Reporting status ${status}: ${reason}"'
            - '    curl_cli -s -S --cacert ${CPDIR}/tmp/wait-handle.crt -X PUT -H "Content-Type:" --data-binary "{\"Status\" : \"${status}\", \"Reason\" : \"${reason}\", \"UniqueId\" : \"${instance_id}\", \"Data\": \"${data}\"}" "${wait_handle}"'
            - '}'
            - 'echo "Setting up parameters"'
            - !Sub 'pwd_hash=''${GatewayPasswordHash}'' ; shell=${Shell} ; hostname=${GatewayHostname} ; allow_info=${AllowUploadDownload} ; eic=${EnableInstanceConnect} ; ntp1=${NTPPrimary} ; ntp2=${NTPSecondary}'
            - !If [AllocateAddress, !Sub 'wait_handle=''${ClusterReadyHandle}''',!Ref 'AWS::NoValue']
            - !Join ['', ['other_member_ip="', !GetAtt MemberBInternalInterface.PrimaryPrivateIpAddress, '"']]
            - !Join ['', ['eip="', !If [AllocateAddress, !Ref MemberAPublicAddress, ''], '"']]
            - !Join ['', ['sic="$(echo ', 'Fn::Base64': !Ref GatewaySICKey, ' | base64 -d)"']]
            - !Join ['', ['bootstrap="$(echo ', 'Fn::Base64': !Ref GatewayBootstrapScript, ' | base64 -d)"']]
            - 'echo "Generating TOKEN"'
            - 'TOKEN=`curl_cli -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 3600"`'
            - 'if [[ -z ${TOKEN} ]]; then'
            - '    exit 1'
            - 'fi'
            - 'echo "Getting instance id"'
            - 'instance_id="$(curl_cli -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)"'
            - 'if [[ -n ${wait_handle} ]] && [[ -n ${eip} ]]; then'
            - '    trap "report-status true" EXIT'
            - 'fi'
            - 'eth1_details=$(/sbin/ifconfig eth1 | grep ''inet addr:'' | awk ''{$1=$1};1'')'
            - 'ip=($(echo ${eth1_details} | cut -d'' '' -f2 | cut -d'':'' -f2 | tr ''.'' '' ''))'
            - 'mask=($(echo ${eth1_details} | cut -d'' '' -f4 | cut -d'':'' -f2 | tr ''.'' '' ''))'
            - 'eth1_default_gw="$((${ip[0]} & ${mask[0]})).$((${ip[1]} & ${mask[1]})).$((${ip[2]} & ${mask[2]})).$(((${ip[3]} & ${mask[3]})+1))"'
            - 'echo "Setting static route to other member eth1 - ${other_member_ip} via internal subnet default gateway - ${eth1_default_gw}"'
            - 'clish -c "set static-route ${other_member_ip}/32 nexthop gateway address ${eth1_default_gw} on" -s'
            - 'template="geo_cluster"'
            - 'cv_path="/etc/cloud-version"'
            - 'echo "Updating cloud-version file"'
            - 'if test -f ${cv_path}; then'
            - '    echo template_name: ${template} >> ${cv_path}'
            - '    echo template_version: 20211212 >> ${cv_path}'
            - 'fi'
            - 'cv_json_path="/etc/cloud-version.json"'
            - 'cv_json_path_tmp="/etc/cloud-version-tmp.json"'
            - 'if test -f ${cv_json_path}; then'
            - '    cat ${cv_json_path} | jq ''.template_name = "''"${template}"''"'' | jq ''.template_version = "20211212"'' > ${cv_json_path_tmp}'
            - '    mv ${cv_json_path_tmp} ${cv_json_path}'
            - 'fi'
            - 'if [[ -z ${pwd_hash} ]]; then'
            - '    echo "Generating random password hash"'
            - '    pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"'
            - 'fi'
            - 'echo "Setting admin shell to ${shell}"'
            - 'clish -c "set user admin shell ${shell}" -s'
            - 'if [[ -n ${ntp1} ]]; then'
            - '    echo "Setting primary NTP server to ${ntp1}"'
            - '    clish -c "set ntp server primary ${ntp1} version 4" -s'
            - '    if [[ -n ${ntp2} ]]; then'
            - '        echo "Setting secondary NTP server to ${ntp2}"'
            - '        clish -c "set ntp server secondary ${ntp2} version 4" -s'
            - '    fi'
            - 'fi'
            - 'if [[ -n ${hostname} ]]; then'
            - '    hostname+="-member-a"'
            - '    echo "Setting hostname to ${hostname}"'
            - '    clish -c "set hostname ${hostname}" -s'
            - 'fi'
            - 'echo "Starting First Time Wizard"'
            - 'blink_config -s "gateway_cluster_member=true&ftw_sic_key=${sic}&upload_info=${allow_info}&download_info=${allow_info}&admin_hash=${pwd_hash}"'
            - 'echo "Setting admin password"'
            - 'clish -c "set user admin password-hash ${pwd_hash}" -s'
            - 'if ${eic}; then'
            - '    echo "Enabling ec2 instance connect"'
            - '    if [[ -d "/etc/ec2-instance-connect" ]]; then'
            - '        ec2-instance-connect-config on'
            - '    else'
            - '        echo "Could not enable eic, /etc/ec2-instance-connect was not found"'
            - '    fi'
            - 'fi'
            - 'echo "Setting LocalGatewayExternal dynamic object"'
            - 'addr_ex="$(ip addr show dev eth0 | awk ''/inet/{print $2; exit}'' | cut -d / -f 1)"'
            - 'dynamic_objects -n LocalGatewayExternal -r ${addr_ex} ${addr_ex} -a || true'
            - 'echo "Setting LocalGatewayInternal dynamic object"'
            - 'addr_int="$(ip addr show dev eth1 | awk ''/inet/{print $2; exit}'' | cut -d / -f 1)"'
            - 'dynamic_objects -n LocalGatewayInternal -r ${addr_int} ${addr_int} -a || true'
            - 'if [[ -n ${bootstrap} ]]; then'
            - '    echo "Invoking bootstrap script"'
            - '    eval ${bootstrap}'
            - 'fi'
            - 'echo "Rebooting..."'
            - 'shutdown -r now'
  MemberBInstance:
    Type: AWS::EC2::Instance
    DependsOn: MemberBInternalInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref GatewayName, Member-B]]
      ImageId: !GetAtt AMI.Outputs.ImageId
      InstanceType: !Ref GatewayInstanceType
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: !If [EncryptedVolume, true, false]
            KmsKeyId: !If [EncryptedVolume, !Ref VolumeEncryption, !Ref 'AWS::NoValue']
            VolumeType: !Ref VolumeType
            VolumeSize: !Ref VolumeSize
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref MemberBExternalInterface
        - DeviceIndex: 1
          NetworkInterfaceId: !Ref MemberBInternalInterface
      IamInstanceProfile: !Ref ClusterInstanceProfile
      DisableApiTermination: !Ref TerminationProtection
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'set -e'
            - 'logfile=/var/log/aws-user-data.log'
            - '> ${logfile}'
            - 'exec 1>>${logfile} 2>>${logfile}'
            - 'echo -e "\nStarting user-data\n"'
            - 'function report-status() {'
            - '    local rc=$?'
            - '    local reboot="${1:-false}"'
            - '    local status=""'
            - '    local reason="Security Gateway configuration"'
            - '    local data=""'
            - '    set +e'
            - '    printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >${CPDIR}/tmp/wait-handle.crt'
            - '    cat ${CPDIR}/conf/ca-bundle.crt >>${CPDIR}/tmp/wait-handle.crt'
            - '    if [[ ${rc} -eq 0 ]]; then'
            - '        status="SUCCESS"'
            - '        reason+=" completed"'
            - '        data="Configuration completed."'
            - '    else'
            - '        status="FAILURE"'
            - '        reason+=" failed"'
            - '        data="None"'
            - '    fi'
            - '    echo "Reporting status ${status}: ${reason}"'
            - '    curl_cli -s -S --cacert ${CPDIR}/tmp/wait-handle.crt -X PUT -H "Content-Type:" --data-binary "{\"Status\" : \"${status}\", \"Reason\" : \"${reason}\", \"UniqueId\" : \"${instance_id}\", \"Data\": \"${data}\"}" "${wait_handle}"'
            - '}'
            - 'echo "Setting up parameters"'
            - !Sub 'pwd_hash=''${GatewayPasswordHash}'' ; shell=${Shell} ; hostname=${GatewayHostname} ; allow_info=${AllowUploadDownload} ; eic=${EnableInstanceConnect} ; ntp1=${NTPPrimary} ; ntp2=${NTPSecondary}'
            - !If [AllocateAddress, !Sub 'wait_handle=''${ClusterReadyHandle}''',!Ref 'AWS::NoValue']
            - !Join ['', ['other_member_ip="', !GetAtt MemberAInternalInterface.PrimaryPrivateIpAddress, '"']]
            - !Join ['', ['eip="', !If [AllocateAddress, !Ref MemberBPublicAddress, ''], '"']]
            - !Join ['', ['sic="$(echo ', 'Fn::Base64': !Ref GatewaySICKey, ' | base64 -d)"']]
            - !Join ['', ['bootstrap="$(echo ', 'Fn::Base64': !Ref GatewayBootstrapScript, ' | base64 -d)"']]
            - 'echo "Generating TOKEN"'
            - 'TOKEN=`curl_cli -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 3600"`'
            - 'if [[ -z ${TOKEN} ]]; then'
            - '    exit 1'
            - 'fi'
            - 'echo "Getting instance id"'
            - 'instance_id="$(curl_cli -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)"'
            - 'if [[ -n ${wait_handle} ]] && [[ -n ${eip} ]]; then'
            - '    trap "report-status true" EXIT'
            - 'fi'
            - 'eth1_details=$(/sbin/ifconfig eth1 | grep ''inet addr:'' | awk ''{$1=$1};1'')'
            - 'ip=($(echo ${eth1_details} | cut -d'' '' -f2 | cut -d'':'' -f2 | tr ''.'' '' ''))'
            - 'mask=($(echo ${eth1_details} | cut -d'' '' -f4 | cut -d'':'' -f2 | tr ''.'' '' ''))'
            - 'eth1_default_gw="$((${ip[0]} & ${mask[0]})).$((${ip[1]} & ${mask[1]})).$((${ip[2]} & ${mask[2]})).$(((${ip[3]} & ${mask[3]})+1))"'
            - 'echo "Setting static route to other member eth1 - ${other_member_ip} via internal subnet default gateway - ${eth1_default_gw}"'
            - 'clish -c "set static-route ${other_member_ip}/32 nexthop gateway address ${eth1_default_gw} on" -s'
            - 'template="geo_cluster"'
            - 'cv_path="/etc/cloud-version"'
            - 'echo "Updating cloud-version file"'
            - 'if test -f ${cv_path}; then'
            - '    echo template_name: ${template} >> ${cv_path}'
            - '    echo template_version: 20211212 >> ${cv_path}'
            - 'fi'
            - 'cv_json_path="/etc/cloud-version.json"'
            - 'cv_json_path_tmp="/etc/cloud-version-tmp.json"'
            - 'if test -f ${cv_json_path}; then'
            - '    cat ${cv_json_path} | jq ''.template_name = "''"${template}"''"'' | jq ''.template_version = "20211212"'' > ${cv_json_path_tmp}'
            - '    mv ${cv_json_path_tmp} ${cv_json_path}'
            - 'fi'
            - 'if [[ -z ${pwd_hash} ]]; then'
            - '    echo "Generating random password hash"'
            - '    pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"'
            - 'fi'
            - 'echo "Setting admin shell to ${shell}"'
            - 'clish -c "set user admin shell ${shell}" -s'
            - 'if [[ -n ${ntp1} ]]; then'
            - '    echo "Setting primary NTP server to ${ntp1}"'
            - '    clish -c "set ntp server primary ${ntp1} version 4" -s'
            - '    if [[ -n ${ntp2} ]]; then'
            - '        echo "Setting secondary NTP server to ${ntp2}"'
            - '        clish -c "set ntp server secondary ${ntp2} version 4" -s'
            - '    fi'
            - 'fi'
            - 'if [[ -n ${hostname} ]]; then'
            - '    hostname+="-member-b"'
            - '    echo "Setting hostname to ${hostname}"'
            - '    clish -c "set hostname ${hostname}" -s'
            - 'fi'
            - 'echo "Starting First Time Wizard"'
            - 'blink_config -s "gateway_cluster_member=true&ftw_sic_key=${sic}&upload_info=${allow_info}&download_info=${allow_info}&admin_hash=${pwd_hash}"'
            - 'echo "Setting admin password"'
            - 'clish -c "set user admin password-hash ${pwd_hash}" -s'
            - 'if ${eic}; then'
            - '    echo "Enabling ec2 instance connect"'
            - '    if [[ -d "/etc/ec2-instance-connect" ]]; then'
            - '        ec2-instance-connect-config on'
            - '    else'
            - '        echo "Could not enable eic, /etc/ec2-instance-connect was not found"'
            - '    fi'
            - 'fi'
            - 'echo "Setting LocalGatewayExternal dynamic object"'
            - 'addr_ex="$(ip addr show dev eth0 | awk ''/inet/{print $2; exit}'' | cut -d / -f 1)"'
            - 'dynamic_objects -n LocalGatewayExternal -r ${addr_ex} ${addr_ex} -a || true'
            - 'echo "Setting LocalGatewayInternal dynamic object"'
            - 'addr_int="$(ip addr show dev eth1 | awk ''/inet/{print $2; exit}'' | cut -d / -f 1)"'
            - 'dynamic_objects -n LocalGatewayInternal -r ${addr_int} ${addr_int} -a || true'
            - 'if [[ -n ${bootstrap} ]]; then'
            - '    echo "Invoking bootstrap script"'
            - '    eval ${bootstrap}'
            - 'fi'
            - 'echo "Rebooting..."'
            - 'shutdown -r now'
  MemberAPublicAddress:
    Type: AWS::EC2::EIP
    Condition: AllocateAddress
    Properties:
      Domain: vpc
  MemberBPublicAddress:
    Type: AWS::EC2::EIP
    Condition: AllocateAddress
    Properties:
      Domain: vpc
  MemberAAddressAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: AllocateAddress
    DependsOn: MemberAInstance
    Properties:
      NetworkInterfaceId: !Ref MemberAExternalInterface
      AllocationId: !GetAtt MemberAPublicAddress.AllocationId
      PrivateIpAddress: !GetAtt MemberAExternalInterface.PrimaryPrivateIpAddress
  MemberBAddressAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: AllocateAddress
    DependsOn: MemberBInstance
    Properties:
      NetworkInterfaceId: !Ref MemberBExternalInterface
      AllocationId: !GetAtt MemberBPublicAddress.AllocationId
      PrivateIpAddress: !GetAtt MemberBExternalInterface.PrimaryPrivateIpAddress
Outputs:
  MemberAPublicAddress:
    Condition: AllocateAddress
    Description: The public address of member A.
    Value: !Ref MemberAPublicAddress
  MemberAExternalInterface:
    Description: The external interface of member A.
    Value: !Ref MemberAExternalInterface
  MemberASSH:
    Condition: AllocateAddress
    Description: SSH command to member A.
    Value: !Join ['', ['ssh -i ', !Ref KeyName, ' admin@', !Ref MemberAPublicAddress]]
  MemberAURL:
    Condition: AllocateAddress
    Description: URL to the member A portal.
    Value: !Join ['', ['https://', !Ref MemberAPublicAddress]]
  MemberBPublicAddress:
    Condition: AllocateAddress
    Description: The public address of member B.
    Value: !Ref MemberBPublicAddress
  MemberBExternalInterface:
    Description: The external interface of member B.
    Value: !Ref MemberBExternalInterface
  MemberBSSH:
    Condition: AllocateAddress
    Description: SSH command to member B.
    Value: !Join ['', ['ssh -i ', !Ref KeyName, ' admin@', !Ref MemberBPublicAddress]]
  MemberBURL:
    Condition: AllocateAddress
    Description: URL to the member B portal.
    Value: !Join ['', ['https://', !Ref MemberBPublicAddress]]
