AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a Check Point Multi-Domain Server (20211212)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Network Configuration
        Parameters:
          - VPC
          - MDSSubnet
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - MDSName
          - MDSInstanceType
          - KeyName
          - VolumeSize
          - VolumeType
          - VolumeEncryption
          - EnableInstanceConnect
          - TerminationProtection
      - Label:
          default: IAM Permissions (ignored when the installation type is not Primary
            Multi-Domain Server)
        Parameters:
          - MDSPermissions
          - MDSPredefinedRole
          - MDSSTSRoles
      - Label:
          default: Check Point Settings
        Parameters:
          - MDSVersion
          - Shell
          - MDSPasswordHash
      - Label:
          default: Multi-Domain Server Settings
        Parameters:
          - MDSHostname
          - MDSInstallationType
          - MDSSICKey
          - AllowUploadDownload
          - AdminCIDR
          - GatewaysAddresses
          - MDSBootstrapScript
          - NTPPrimary
          - NTPSecondary
    ParameterLabels:
      VPC:
        default: VPC
      MDSSubnet:
        default: MDS subnet
      MDSName:
        default: MDS name
      MDSInstanceType:
        default: Instance type
      KeyName:
        default: Key name
      VolumeSize:
        default: Root volume size (GB)
      VolumeType:
        default: Volume Type
      VolumeEncryption:
        default: Volume encryption KMS key identifier
      EnableInstanceConnect:
        default: Enable AWS Instance Connect
      TerminationProtection:
        default: Termination Protection
      MDSPermissions:
        default: IAM role
      MDSPredefinedRole:
        default: Existing IAM role name
      MDSSTSRoles:
        default: STS roles
      MDSVersion:
        default: Version & license
      Shell:
        default: Admin shell
      MDSPasswordHash:
        default: Password hash
      MDSHostname:
        default: MDS hostname
      MDSInstallationType:
        default: MDS installation type
      MDSSICKey:
        default: SIC key
      AllowUploadDownload:
        default: Allow upload & download
      AdminCIDR:
        default: Administrator addresses
      GatewaysAddresses:
        default: Gateways addresses
      MDSBootstrapScript:
        default: MDS Bootstrap script
      NTPPrimary:
        default: Primary NTP server
      NTPSecondary:
        default: Secondary NTP server
Parameters:
  VPC:
    Description: Select an existing VPC.
    Type: AWS::EC2::VPC::Id
    MinLength: 1
  MDSSubnet:
    Description: To access the instance from the internet, make sure the subnet has.
      a route to the internet
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
  MDSName:
    Description: The MDS name tag.
    Type: String
    Default: Check-Point-MDS
  MDSInstanceType:
    Description: The instance type of the Multi-Domain Server.
    Type: String
    Default: m5.12xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VolumeSize:
    Type: Number
    MinValue: 100
    Default: 100
  VolumeType:
    Description: General Purpose SSD Volume Type
    Type: String
    Default: gp3
    AllowedValues:
      - gp3
      - gp2
  VolumeEncryption:
    Description: KMS or CMK key Identifier - Use key ID, alias or ARN. Key alias should be prefixed with 'alias/' (e.g. for KMS default alias 'aws/ebs' - insert 'alias/aws/ebs').
    Type: String
    Default: alias/aws/ebs
  EnableInstanceConnect:
    Description: Enable SSH connection over AWS web console.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  TerminationProtection:
    Description: Prevents an instance from accidental termination.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  MDSPermissions:
    Description: IAM role to attach to the instance profile.
    Type: String
    Default: Create with read permissions
    AllowedValues:
      - None (configure later)
      - Use existing (specify an existing IAM role name)
      - Create with assume role permissions (specify an STS role ARN)
      - Create with read permissions
      - Create with read-write permissions
  MDSPredefinedRole:
    Description: A predefined IAM role to attach to the instance profile. Ignored
      if IAM role is not set to 'Use existing'.
    Type: String
    Default: ''
  MDSSTSRoles:
    Description: The IAM role will be able to assume these STS Roles (comma separated
      list of ARNs, without spaces). Ignored if IAM role is set to 'None' or 'Use
      existing'.
    Type: CommaDelimitedList
    Default: ''
  MDSVersion:
    Description: The license to install on the Multi-Domain Server.
    Type: String
    Default: R81.10-BYOL
    AllowedValues:
      - R80.40-BYOL
      - R81-BYOL
      - R81.10-BYOL
  Shell:
    Description: Change the admin shell to enable advanced command line configuration.
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
      - /etc/cli.sh
      - /bin/bash
      - /bin/csh
      - /bin/tcsh
  MDSPasswordHash:
    Description: Admin user's password hash (use command "openssl passwd -6 PASSWORD"
      to get the PASSWORD's hash). (optional)
    Type: String
    Default: ''
    AllowedPattern: '[\$\./a-zA-Z0-9]*'
    NoEcho: true
  MDSHostname:
    Description: (optional)
    Type: String
    Default: mds-aws
    AllowedPattern: '^([A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?|)$'
    ConstraintDescription: A valid hostname label or an empty string.
  MDSInstallationType:
    Description: Determines the Multi-Domain Server installation type.
    Type: String
    Default: Primary Multi-Domain Server
    AllowedValues:
      - Primary Multi-Domain Server
      - Secondary Multi-Domain Server
      - Multi-Domain Log Server
  MDSSICKey:
    Description: >-
      Mandatory if deploying a Secondary Multi-Domain Server or Multi-Domain Log Server,
      the Secure Internal Communication key creates trusted connections between Check
      Point components. Choose a random string consisting of at least 8 alphanumeric
      characters.
    Type: String
    Default: ''
    AllowedPattern: '(|[a-zA-Z0-9]{8,})'
    ConstraintDescription: Can be empty if this is a Primary Multi-Domain Server.
      Otherwise, at least 8 alpha numeric characters.
    NoEcho: true
  AllowUploadDownload:
    Description: Automatically download updates and share statistical data for product improvement purpose.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  AdminCIDR:
    Description: Allow web, SSH, and graphical clients only from this network to communicate
      with the Multi-Domain Server. The address should be either 0.0.0.0/0 (any address) or <IP>/32 (specific address)
    Type: String
    AllowedPattern: '^((0.0.0.0\/0)|)$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/32)$'
    ConstraintDescription: Administrator address must be either 0.0.0.0/0 or <IP>/32
  GatewaysAddresses:
    Description: Allow gateways only from this network to communicate with the Multi-Domain.
      Server
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  MDSBootstrapScript:
    Description: An optional script with semicolon (;) separated commands to run on the initial boot. (optional)
    Type: String
    Default: ''
    NoEcho: true
  NTPPrimary:
    Description: (optional)
    Type: String
    Default: 169.254.169.123
    AllowedPattern: '[\.a-zA-Z0-9\-]*'
  NTPSecondary:
    Description: (optional)
    Type: String
    Default: '0.pool.ntp.org'
    AllowedPattern: '[\.a-zA-Z0-9\-]*'
Conditions:
  EncryptedVolume: !Not [!Equals [!Ref VolumeEncryption, '']]
  CreateRole: !And
    - !Or
      - !Condition PrimaryMDS
      - !Condition SecondaryMDS
    - !Or
      - !Equals [!Ref MDSPermissions, Create with assume role permissions (specify an STS role ARN)]
      - !Equals [!Ref MDSPermissions, Create with read permissions]
      - !Equals [!Ref MDSPermissions, Create with read-write permissions]
  UseRole: !And [!Or [!Condition PrimaryMDS, !Condition SecondaryMDS], !Not [!Equals [!Ref MDSPermissions, None (configure later)]]]
  PrimaryMDS: !Equals [!Ref MDSInstallationType, Primary Multi-Domain Server]
  SecondaryMDS: !Equals [!Ref MDSInstallationType, Secondary Multi-Domain Server]
Resources:
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/utils/amis.yaml
      Parameters:
        Version: !Join ['-', [!Ref MDSVersion, MGMT]]
  MDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MDS security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 257
          ToPort: 257
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 8211
          ToPort: 8211
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18191
          ToPort: 18191
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18192
          ToPort: 18192
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18210
          ToPort: 18210
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18211
          ToPort: 18211
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18221
          ToPort: 18221
        - CidrIp: !Ref GatewaysAddresses
          IpProtocol: tcp
          FromPort: 18264
          ToPort: 18264
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 18190
          ToPort: 18190
        - CidrIp: !Ref AdminCIDR
          IpProtocol: tcp
          FromPort: 19009
          ToPort: 19009
  MDSRoleStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateRole
    Properties:
      TemplateURL: https://cgi-cfts.s3.amazonaws.com/iam/cme-iam-role.yaml
      Parameters:
        Permissions: !Ref MDSPermissions
        STSRoles: !Join [',', !Ref MDSSTSRoles]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: UseRole
    Properties:
      Path: /
      Roles:
        - !If [CreateRole, !GetAtt MDSRoleStack.Outputs.CMEIAMRole, !Ref MDSPredefinedRole]
  MDSInstance:
    Type: AWS::EC2::Instance
    DependsOn: MDSSecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Ref MDSName
      ImageId: !GetAtt AMI.Outputs.ImageId
      InstanceType: !Ref MDSInstanceType
      IamInstanceProfile: !If [UseRole, !Ref InstanceProfile, !Ref 'AWS::NoValue']
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          Description: eth0
          GroupSet:
            - !Ref MDSSecurityGroup
          DeleteOnTermination: true
          SubnetId: !Ref MDSSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: !If [EncryptedVolume, true, false]
            KmsKeyId: !If [EncryptedVolume, !Ref VolumeEncryption, !Ref 'AWS::NoValue']
            VolumeType: !Ref VolumeType
            VolumeSize: !Ref VolumeSize
      DisableApiTermination: !Ref TerminationProtection
      UserData: !Base64
        Fn::Join:
          - |+

          - - '#!/bin/bash'
            - 'set -e'
            - 'logfile=/var/log/aws-user-data.log'
            - '> ${logfile}'
            - 'exec 1>>${logfile} 2>>${logfile}'
            - 'echo -e "\nStarting user-data\n"'
            - 'echo "Setting up parameters"'
            - !Sub 'pwd_hash=''${MDSPasswordHash}'' ; shell=${Shell} ; allow_info=${AllowUploadDownload} ; hostname=${MDSHostname} ; eic=${EnableInstanceConnect} ; ntp1=${NTPPrimary} ; ntp2=${NTPSecondary} ; admin_subnet=${AdminCIDR}'
            - !If [PrimaryMDS, 'primary=true ; secondary=false ; logServer=false', !If [SecondaryMDS, 'primary=false ; secondary=true ; logServer=false', 'primary=false ; secondary=false ; logServer=true']]
            - !If [PrimaryMDS, 'sic=notused', !Join ['', ['sic="$(echo ', 'Fn::Base64': !Ref MDSSICKey, ' | base64 -d)"']]]
            - !Join ['', ['bootstrap="$(echo ', 'Fn::Base64': !Ref MDSBootstrapScript, ' | base64 -d)"']]
            - 'echo "Updating cloud-version file"'
            - 'template="mds"'
            - 'cv_path="/etc/cloud-version"'
            - 'echo "Updating cloud-version file"'
            - 'if test -f ${cv_path}; then'
            - '    echo template_name: ${template} >> ${cv_path}'
            - '    echo template_version: 20211212 >> ${cv_path}'
            - 'fi'
            - 'cv_json_path="/etc/cloud-version.json"'
            - 'cv_json_path_tmp="/etc/cloud-version-tmp.json"'
            - 'if test -f ${cv_json_path}; then'
            - '    cat ${cv_json_path} | jq ''.template_name = "''"${template}"''"'' | jq ''.template_version = "20211212"'' > ${cv_json_path_tmp}'
            - '    mv ${cv_json_path_tmp} ${cv_json_path}'
            - 'fi'
            - 'if [[ -z ${pwd_hash} ]]; then'
            - '    echo "Generating random password hash"'
            - '    pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"'
            - 'fi'
            - 'echo "Setting admin password"'
            - 'clish -c "set user admin password-hash ${pwd_hash}" -s'
            - 'echo "Setting admin shell to ${shell}"'
            - 'clish -c "set user admin shell ${shell}" -s'
            - 'if [[ -n ${ntp1} ]]; then'
            - '    echo "Setting primary NTP server to ${ntp1}"'
            - '    clish -c "set ntp server primary ${ntp1} version 4" -s'
            - '    if [[ -n ${ntp2} ]]; then'
            - '        echo "Setting secondary NTP server to ${ntp2}"'
            - '        clish -c "set ntp server secondary ${ntp2} version 4" -s'
            - '    fi'
            - '    clish -c "set ntp active on" -s'
            - 'fi'
            - 'if [[ -n ${hostname} ]]; then'
            - '    echo "Setting hostname"'
            - '    clish -c "set hostname ${hostname}" -s'
            - 'fi'
            - 'admin_subnet_ip="$(echo ${admin_subnet} | cut -d / -f 1)"'
            - 'admin_subnet_bits="$(echo ${admin_subnet} | cut -d / -f 2)"'
            - 'if [[ "0.0.0.0/0" == ${admin_subnet} ]]; then'
            - '    mgmt_clients="mgmt_gui_clients_radio=any"'
            - 'elif [[ ${admin_subnet_bits} == "32" ]]; then'
            - '    mgmt_clients="mgmt_gui_clients_radio=this&mgmt_gui_clients_hostname=${admin_subnet_ip}"'
            - 'else'
            - '    mgmt_clients="mgmt_gui_clients_radio=network&mgmt_gui_clients_ip_field=${admin_subnet_ip}&mgmt_gui_clients_subnet_field=${admin_subnet_bits}"'
            - 'fi'
            - 'echo "Starting First Time Wizard"'
            - 'config_system -s "install_security_gw=false&${mgmt_clients}&install_mds_primary=${primary}&install_mds_secondary=${secondary}&install_mlm=${logServer}&install_mds_interface=eth0&mgmt_admin_radio=gaia_admin&ftw_sic_key=${sic}&download_info=${allow_info}&upload_info=${allow_info}"'
            - 'if ${eic}; then'
            - '    echo "Enabling ec2 instance connect"'
            - '    if [[ -d "/etc/ec2-instance-connect" ]]; then'
            - '        ec2-instance-connect-config on'
            - '    else'
            - '        echo "Could not enable eic, /etc/ec2-instance-connect was not found"'
            - '    fi'
            - 'fi'
            - 'if ${primary}; then'
            - '    until mgmt_cli -r true discard; do'
            - '        sleep 30'
            - '    done'
            - 'fi'
            - 'if [[ -n ${bootstrap} ]]; then'
            - '    echo "Invoking bootstrap script"'
            - '    eval ${bootstrap}'
            - 'fi'
